/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
//  递归可以有返回值，这个还是我算是第一次做到这种
// 印象中递归都是由一个参数保存最终的结果
// 首先判断是否cnt=0？再判断是否为子结点
// 因为要判断是否为子结点 所以不能让空结点进入递归
// 因为数据可正可负，因此不到叶子节点不能停止递归
    bool dfs(TreeNode* root, int cnt)
    {
        if (!cnt)
        {
            if (!root->left && !root->right)
            return true;
        }

        if (root->left)
        {
            bool flag = dfs(root->left, cnt - root->left->val);
            if (flag) return true;
        }

        if (root->right)
        {
            bool flag = dfs(root->right, cnt - root->right->val);
            if (flag) return true;
        }

        return false;
    }
    bool hasPathSum(TreeNode* root, int targetSum) {
        if (!root) return false;
        if (dfs(root, targetSum - root->val)) return true;
        else return false;
    }
};
