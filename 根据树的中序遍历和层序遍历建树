#include <iostream>
#include <cstdlib>
#include <map>

using namespace std;
struct node {
    int data;
    node* lchild;
    node* rchild;
};

int layer[1050];
int in[1050];
int n;

map<int, int> layerPos;
node* create(int inL, int inR) {
    if (inL > inR) //递归终点
        return nullptr;
    int rootPos = inL;
    for (int i = inL; i <= inR; i++) {
        //寻找根结点
        //层序编号最小
        if (layerPos[in[i]] <= layerPos[in[rootPos]])
            rootPos = i;
    }
    node* root = new node;
    root->data = in[rootPos];
    //递归生成左子树
    root->lchild = create(inL, rootPos - 1);
    //递归生成右子树
    root->rchild = create(rootPos + 1, inR);
    //返回树
    return root;
}
void preorder(node* a) {
//先序遍历
    if (a == nullptr)
        return;
    cout << a->data << ' ';
    preorder(a->lchild);
    preorder(a->rchild);
}
void postorder(node* a) {
//先序遍历
    if (a == nullptr)
        return;
    
    postorder(a->lchild);
    postorder(a->rchild);
    cout << a->data << ' ';
}
int main() {
    cin >> n;
    // 记录层序遍历中出现的次序
    for (int i = 0; i < n; i++)
    {
        cin >> layer[i];
        layerPos[layer[i]] = i;
    }
    for (int i = 0; i < n; i++)
        cin >> in[i];
    
    node* binTree = create(0, n - 1);
    preorder(binTree);
    cout << endl;
    postorder(binTree);
    return 0;
}
