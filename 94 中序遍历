/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<int> inorderTraversal(TreeNode* root) {
        if (root == nullptr) return {};
        stack<TreeNode*> stk;
        vector<int> res;
        // 初始化
        TreeNode* cur = root;

        while (cur != nullptr || !stk.empty())
        {
            // 将树最左边的结点全部压入栈中，非空才会入栈
            if (cur != nullptr)
            {
                stk.push(cur);
                cur = cur->left;
            }
            // 开始将结点中的值放入res数组中
            // 在cur的视角中，左节点上一次就已经处理完成了
            // 所以将cur->val放入res数组中
            // 把右节点当左左节点进行操作
            // 需要考虑右节点是否为空吗？
            // 需要考虑，如果右节点非空则需要处理该子树
            // 如果为空需要处理下一个结点
            // 当cur==nullptr时才会处理下一个结点
            else
            {    
                cur = stk.top();
                stk.pop();
                res.push_back(cur->val);
                if (cur->right != nullptr) cur = cur->right;
                else cur = nullptr;
            }
        }
        return res;
    }
};
