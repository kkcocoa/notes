
// 1.没有该节点
// 2.该结点的左右子结点为空
// 3.左右子节点有一个为空
// 4.左右子节点都不空
// 需要在树种找到一个结点去代替待删除的结点的位置
// 由于bst，因此找到右子树中的最小值min
// 因为处于右子树因此min一定大于左子树的所有值
// 并且是右子树的最小值
// 因此min可以代替待删除的值

// 返回值是删除后的结点
    TreeNode* my_delete(TreeNode* root, int key)
    {
        if (root == nullptr) return nullptr;

        if (key > root->val) 
            root->right = my_delete(root->right, key);
        else if (key < root->val)
            root->left = my_delete(root->left, key);
        else
        {
            if (!root->left && !root->right)
                return nullptr;
            else if (root->left && root->right)
            {
                TreeNode* succsesor = root->right;
                while (succsesor->left)
                    succsesor = succsesor->left;
                
                root->right = my_delete(root->right, succsesor->val);
                succsesor->left = root->left;
                succsesor->right = root->right;

                return succsesor;
            }
            else if (root->left) return root->left;
            else if (root->right) return root->right;
        }

        return root;
    }
