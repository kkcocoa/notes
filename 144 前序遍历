/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    // 面对这种与学习算法所不同的可以构造一个新的函数
    // 后面在它的函数中调用自己的函数
    // 递归法
    // void pretvl(TreeNode* root, vector<int> & res)
    // {
    //     if (root == nullptr) return;
    //     res.push_back(root->val);
    //     pretvl(root->left, res);
    //     pretvl(root->right, res);
    // }
    // 迭代法（栈）
    vector<int> preorderTraversal(TreeNode* root) {
        if (root == nullptr) return {};
        vector<int> res;
        stack<TreeNode*> stk;
        stk.push(root);
        while (!stk.empty())
        {
            TreeNode* tmp = stk.top();
            stk.pop();
            res.push_back(tmp->val);

            if (tmp->right != nullptr) stk.push(tmp->right);
            if (tmp->left != nullptr) stk.push(tmp->left);
        }

        return res;
    }

    
    
};
