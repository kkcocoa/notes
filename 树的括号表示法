#include <iostream>
#include <vector>
#include <stack>
#include <queue>
using namespace std;

// 定义节点

struct TreeNode
{
    char value;
    vector<TreeNode*> subNode;

    TreeNode(char a) : value(a) {}
};

void steptra(TreeNode* root)
{
    if (!root) return;

    queue<TreeNode*> que;
    que.push(root);

    while (!que.empty())
    {
        int size = que.size();

        for (int i = 0; i < size; i++)
        {
            TreeNode* cur = que.front();
            que.pop();
            cout << cur->value;

            for (int i = 0; i < cur->subNode.size(); i ++)
                que.push(cur->subNode[i]);
        }
    }
}

int main() {
    char ch;
    stack<TreeNode*> stk;
    TreeNode* root = nullptr;
    while (cin >> ch)
    {   
        if (ch == ',') continue;
        if (ch != ')')
            stk.push(new TreeNode(ch));
        else
        {
            // 遇到右括号，出栈遇到左括号终止，为一个子树，temp存放节点
            int cnt = 0;
            vector<TreeNode*> temp;
            TreeNode* cur = stk.top();
            while (cur->value != '(')
            {
                stk.pop();
                temp.push_back(cur);
                cnt ++;
                cur = stk.top();
            }
            stk.pop();
            if (stk.empty()) break;
            // 为该节点连接子节点
            cur = stk.top();
            for (int i = cnt - 1; i >= 0; i --)
            {
                cur->subNode.push_back(temp[i]);
            }
            root = cur;
        }
    }
    steptra(root);
    return 0;
}
// 64 位输出请用 printf("%lld")
