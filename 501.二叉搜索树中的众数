class Solution {
public:
    // 因为要统计树中数值的数量
    // 可以使用哈希表存储这个键值对
    // 遍历整棵树建立哈希表
    // 最后遍历哈希表找出最大值返回即可
    unordered_map<int, int> h;
    vector<int> findMode(TreeNode* root) {
        if (!root) return {};

        vector<int> res;
        queue<TreeNode*> que;
        que.push(root);

        while (!que.empty())
        {
            int n = que.size();
            for (int i = 0; i < n; i ++)
            {
                TreeNode* cur = que.front();
                que.pop();
                int t = cur->val;
                h[t] ++;
                if (cur->left) que.push(cur->left);
                if (cur->right) que.push(cur->right);
            }
        }

        int max = 0;
        for (auto i : h)
        {
            if (i.second > max) max = i.second;
        }

        for (auto i : h)
        {
            if (i.second == max) res.push_back(i.first);
        }

        return res;
    }
};

时间复杂度分析：
1. 层序遍历：对于每个节点，我们都会将其加入队列，然后从队列中取出并处理。因此，层序遍历的时间复杂度是 O(n)，其中 n 是树中节点的数量。
2. 哈希表遍历：我们需要遍历哈希表两次，一次是为了找出最大频率，另一次是为了找出所有与最大频率相等的数值。哈希表的大小最多与树中节点的数量相同，因此每次遍历的时间复杂度也是 O(n)。
综上所述，总的时间复杂度是 O(n)。
空间复杂度分析：
1. 哈希表：我们需要一个哈希表来存储每个数值及其出现的次数，因此空间复杂度至少为 O(n)，其中 n 是树中节点的数量。
2. 队列：在层序遍历过程中，我们需要一个队列来存储每一层的节点。在最坏的情况下，树是完全不平衡的，队列中最多会有 n 个节点（除了最后一层，最后一层可能不满），因此队列的空间复杂度也是 O(n)。
3. 结果数组：结果数组的大小取决于众数的数量，最坏情况下，如果所有数值的出现次数都相同，那么结果数组的大小将是 O(n)。但是，这并不是常见情况，通常情况下，结果数组的大小会小于 n。
综上所述，总的空间复杂度是 O(n)。
