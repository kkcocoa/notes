/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int findBottomLeftValue(TreeNode* root) {
        // 只有一个结点返回即可
        if (!root->left && !root->right)
            return root->val;
        // 层序遍历，并把每一层的数值存起来
        queue<TreeNode*> que;
        que.push(root);
        vector<vector<int> > res;

        while (!que.empty())
        {
            int n = que.size();
            vector<int> level;
            for (int i = 0; i < n; i++)
            {
                TreeNode* cur = que.front();
                que.pop();
                if (cur->left) que.push(cur->left);
                if (cur->right) que.push(cur->right);
                level.push_back(cur->val);
            }
            res.push_back(level);
        }

        return res[res.size() - 1][0];
    }
};
