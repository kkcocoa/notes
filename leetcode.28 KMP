
class Solution {
public:
    int strStr(string haystack, string needle) {
        // 保存haystack和needle的长度
        int n = haystack.size(), m = needle.size();
        // 如果m大于n说明needle不是haystack的一部分。
        if (m > n) return -1;
        // 构建kmp模式匹配算法中的next数组 关于needle 初始化next[0] = -1;
        int next[n];
        next[0] = -1;
        // j初始化要一致
        for (int i = 1, j = -1; i < m; i++) // j代表要匹配的字符串的指针， i代表原字符串的指针
        {
            // 当j不是第一个位置时（可以说j可以退步）且要匹配下一个与原字符不一样
            // 令j=next[j];
            while (j >= 0 && needle[j + 1] != needle[i]) j = next[j];
            // 当匹配时，j更近一步
            if (needle[j + 1] == needle[i]) j ++;
            // i索引下的next值为j
            next[i] = j;
        }
        // 这里i要从第一个位置开始匹配
        // next数组已经初始化过了所以不用匹配
        for (int i = 0, j = -1; i < n; i ++)
        {
            // 与构建next数组一个思路
            while (j >= 0 && needle[j + 1] != haystack[i]) j = next[j];
            // 与下一个位置匹配如果j==m-1匹配成功返回
            if (needle[j + 1] == haystack[i]) 
            {
                j ++;
            }
            // i和j都有1的偏移量
            if (j == m - 1) return i - m + 1;
        }

        return -1;
    }
};
