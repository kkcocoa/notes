/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void dfs(vector<string> &res, TreeNode* root, vector<int>& tmp)
    {
        if (!root->left && !root->right)
        {
            tmp.push_back(root->val);
            string str = "";
            for (int i = 0 ; i < tmp.size()- 1; i++)
            {
                int t = i;
                str += to_string(tmp[i]);
                str += "->";
            }
            str += to_string(tmp[tmp.size() - 1]);
            res.push_back(str);
            return;
        }

        if (root)
        {
            tmp.push_back(root->val);
            vector<int> t = tmp;
            if (root->left) dfs(res, root->left, tmp);
            tmp = t;
            if (root->right) dfs(res, root->right, tmp);
            tmp = t;
        }
    }
    vector<string> binaryTreePaths(TreeNode* root) {
        vector<string> res;
        vector<int> tmp;
        dfs(res, root, tmp);
        return res;
    }
};
